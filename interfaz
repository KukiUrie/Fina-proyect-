import tkinter as tk
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import sys
from tkinter import filedialog
import matplotlib.pyplot as plt
import shutil
import pandas as pd

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

all_contet = []
all_images = []
img_idx = [0]
displayed_img = []
temp_results_dir = None
ppd_images = []
temp_csv_path = None
loop = None
global_df = None

# Function to display an image as a grid element
def display_logo(url, row, column, num):
    img = Image.open(resource_path(url))
    img = img.resize((int(img.size[0]/num), int(img.size[1]/num)))
    img = ImageTk.PhotoImage(img)
    logo_label = Label(image=img)  # Removed bg="" to avoid the error
    logo_label.image = img
    logo_label.grid(column=column, row=row, columnspan=3, sticky="nsew")
    return logo_label

def display_icon(url, row, column, funct, Width, Height):
    icon = Image.open(resource_path(url))
    icon = icon.resize((Width, Height))
    icon = ImageTk.PhotoImage(icon)
    icon_label = Button(image=icon, command=funct, width=Width, height=Height, border="0")
    icon_label.image = icon
    icon_label.grid(column=column, row=row, padx=10, pady=10)
    return icon_label

def display_textbox1(content, ro, col, root):
    text_box = Text(root, height=20, width=20, padx=10, pady=10)
    text_box.insert(1.0, content)
    text_box.tag_configure("center", justify="center")
    text_box.tag_add("center", 1.0, "end")
    text_box.grid(column=col, row=ro, columnspan=1, rowspan=3, sticky="w", padx=10, pady=10)

def display_textbox(content, ro, col, root):
    text_box = Text(root, height=20, width=20, padx=10, pady=10)
    text_box.insert(1.0, content)
    text_box.tag_configure("center", justify="center")
    text_box.tag_add("center", 1.0, "end")
    text_box.grid(column=col, row=ro, sticky="nsew", padx=10, pady=10)

def set_background_image(root, url):
    # Initialize the image
    bg_image = Image.open(resource_path(url))
    
    # Resize the image to fit the window size
    bg_photo = ImageTk.PhotoImage(bg_image)
    
    # Create the label with the background image
    bg_label = tk.Label(root, image=bg_photo)
    bg_label.image = bg_photo
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
    
    # Update the image if the window is resized
    def resize_image(event):
        new_bg_image = bg_image.resize((event.width, event.height), Image.LANCZOS)
        new_bg_photo = ImageTk.PhotoImage(new_bg_image)
        bg_label.config(image=new_bg_photo)
        bg_label.image = new_bg_photo
    
    # Bind the resize event
    root.bind("<Configure>", resize_image)

root = Tk()
root.title("Proyect")
root.geometry('+%d+%d' % (10, 6))

set_background_image(root,'C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\greenhouse-gas-emissions.jpg.optimal.jpg')

root.grid_rowconfigure(0, weight=1)
root.grid_rowconfigure(1, weight=1)
root.grid_rowconfigure(2, weight=1)
root.grid_rowconfigure(3, weight=1)
root.grid_rowconfigure(4, weight=1)
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)
root.grid_columnconfigure(2, weight=1)

# Replacing the text title with the image logo
logo_tittle = display_logo('C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\logo_titulo.png', 1, 1, 5)

def cleanup_temp_dir():
    temp_dir = "temp"
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
        print(f"Directorio temporal '{temp_dir}' eliminado.")
    else:
        print(f"No se encontr√≥ el directorio '{temp_dir}'.")

def read_csv_file_btn():
    global global_df
    file_path = filedialog.askopenfilename(
        title="Select a CSV file",
        filetypes=[("CSV files", "*.csv")]
    )
    
    if file_path:
        try:
            global_df = pd.read_csv(file_path)
            messagebox.showinfo("Information", "File uploaded successfully")
        except Exception as e:
            messagebox.showerror("Error uploading the file", str(e))
    else:
        messagebox.showwarning("No file selected", "Please, select a CSV file.")
    
    if global_df is None:
        status_label.config(text="No CSV file uploaded", fg="red")
    else:
        status_label.config(text="CSV file uploaded", fg="green")

def exit_application():
    root.after(0, cleanup_temp_dir)
    root.quit()
    root.destroy()

status_label = tk.Label(root, text="Import a CSV file")
status_label.grid(column=1, row=2, padx=10, pady=10)

status_label2 = tk.Label(root, text="ACA VA ALGO MAS CON RELACION AL BOTON DE PROCESO")
status_label2.grid(column=1, row=3, padx=10, pady=10)

read_btn = display_icon(resource_path('C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\Subir Dataset1.png'), 2, 0, lambda: read_csv_file_btn(), 150, 80)
process_btn = display_icon(resource_path('C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\Procesamiento de datos.png'), 3, 0, lambda: exit_application(), 150, 80)
download_btn = display_icon(resource_path('C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\Descargar informe.png'), 4, 0, lambda: exit_application(), 150, 80)
exit_btn = display_icon(resource_path('C:\\Users\\Daniel\\Documents\\APRENDIZAJE AUTOMATICO\\V2\\Salida.png'), 4, 1, lambda: exit_application(), 150, 80)
text1 = display_textbox1("Carbon emissions, or carbon dioxide (CO2) emissions, are the release of CO2 into the atmosphere as a result of human activity. CO2 is one of the main greenhouse gases contributing to global warming. The primary sources of carbon emissions include the burning of fossil fuels such as coal, oil, and natural gas, deforestation and land-use changes, industrial and manufacturing processes, and transportation, particularly vehicles that use gasoline or diesel.To mitigate carbon emissions, several measures can be taken, such as transitioning to renewable energy sources like solar, wind, and hydroelectric power, improving energy efficiency in buildings, industries, and transportation, reforestation and forest conservation, shifting towards more sustainable diets and reducing food waste, and implementing carbon capture and storage (CCS) technologies to remove CO2 from the atmosphere. Carbon credits are a financial tool that allows companies and countries to offset their emissions by investing in emission reduction or carbon capture projects. Reducing carbon emissions is crucial to mitigate climate change and preserve a habitable planet for future generations.", 2, 8, root)

root.mainloop()
